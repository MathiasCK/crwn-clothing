{"ast":null,"code":"import { takeLatest, put, all, call } from \"redux-saga/effects\";\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from \"../../Firebase/Firebase.utils\";\nimport { signInSuccess, signInFailure } from \"./user.actions\";\nimport userActionTypes from \"./user.types\";\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapShotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(userActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapShotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(userActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(userActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession)]);\n}","map":{"version":3,"sources":["/Users/mathiaskolberg/Documents/React/udemy/crwn-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","auth","googleProvider","createUserProfileDocument","getCurrentUser","signInSuccess","signInFailure","userActionTypes","getSnapshotFromUserAuth","userAuth","additionalData","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","getSnapShotFromUserAuth","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInWithEmail","payload","email","password","signInWithEmailAndPassword","onEmailSignInStart","EMAIL_SIGN_IN_START","isUserAuthenticated","onCheckUserSession","CHECK_USER_SESSION","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AACA,SACEC,IADF,EAEEC,cAFF,EAGEC,yBAHF,EAIEC,cAJF,QAKO,+BALP;AAMA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,gBAA7C;AACA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,OAAO,UAAUC,uBAAV,CAAkCC,QAAlC,EAA4CC,cAA5C,EAA4D;AACjE,MAAI;AACF,UAAMC,OAAO,GAAG,MAAMX,IAAI,CACxBG,yBADwB,EAExBM,QAFwB,EAGxBC,cAHwB,CAA1B;AAKA,UAAME,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMf,GAAG,CAACO,aAAa,CAAC;AAAES,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAnB;AAAuB,SAAGF,YAAY,CAACG,IAAb;AAA1B,KAAD,CAAd,CAAT;AACD,GARD,CAQE,OAAOC,KAAP,EAAc;AACd,UAAMlB,GAAG,CAACQ,aAAa,CAACU,KAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUC,gBAAV,GAA6B;AAClC,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMjB,IAAI,CAACkB,eAAL,CAAqBjB,cAArB,CAAvB;AACA,UAAMkB,uBAAuB,CAACF,IAAD,CAA7B;AACD,GAHD,CAGE,OAAOF,KAAP,EAAc;AACd,UAAMlB,GAAG,CAACQ,aAAa,CAACU,KAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUK,mBAAV,GAAgC;AACrC,QAAMxB,UAAU,CAACU,eAAe,CAACe,oBAAjB,EAAuCL,gBAAvC,CAAhB;AACD;AAED,OAAO,UAAUM,eAAV,CAA0B;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAX,CAA1B,EAA4D;AACjE,MAAI;AACF,UAAM;AAAER,MAAAA;AAAF,QAAW,MAAMjB,IAAI,CAAC0B,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAvB;AACA,UAAMN,uBAAuB,CAACF,IAAD,CAA7B;AACD,GAHD,CAGE,OAAOF,KAAP,EAAc;AACd,UAAMlB,GAAG,CAACQ,aAAa,CAACU,KAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUY,kBAAV,GAA+B;AACpC,QAAM/B,UAAU,CAACU,eAAe,CAACsB,mBAAjB,EAAsCN,eAAtC,CAAhB;AACD;AAED,OAAO,UAAUO,mBAAV,GAAgC;AACrC,MAAI;AACF,UAAMrB,QAAQ,GAAG,MAAML,cAAc,EAArC;AACA,QAAI,CAACK,QAAL,EAAe;AACf,UAAMD,uBAAuB,CAACC,QAAD,CAA7B;AACD,GAJD,CAIE,OAAOO,KAAP,EAAc;AACd,UAAMlB,GAAG,CAACQ,aAAa,CAACU,KAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUe,kBAAV,GAA+B;AACpC,QAAMlC,UAAU,CAACU,eAAe,CAACyB,kBAAjB,EAAqCF,mBAArC,CAAhB;AACD;AAED,OAAO,UAAUG,SAAV,GAAsB;AAC3B,QAAMlC,GAAG,CAAC,CACRC,IAAI,CAACqB,mBAAD,CADI,EAERrB,IAAI,CAAC4B,kBAAD,CAFI,EAGR5B,IAAI,CAAC+B,kBAAD,CAHI,CAAD,CAAT;AAKD","sourcesContent":["import { takeLatest, put, all, call } from \"redux-saga/effects\";\nimport {\n  auth,\n  googleProvider,\n  createUserProfileDocument,\n  getCurrentUser,\n} from \"../../Firebase/Firebase.utils\";\nimport { signInSuccess, signInFailure } from \"./user.actions\";\nimport userActionTypes from \"./user.types\";\n\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(\n      createUserProfileDocument,\n      userAuth,\n      additionalData\n    );\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* signInWithGoogle() {\n  try {\n    const { user } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapShotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(userActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n\nexport function* signInWithEmail({ payload: { email, password } }) {\n  try {\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapShotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* onEmailSignInStart() {\n  yield takeLatest(userActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\n\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* onCheckUserSession() {\n  yield takeLatest(userActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\n\nexport function* userSagas() {\n  yield all([\n    call(onGoogleSignInStart),\n    call(onEmailSignInStart),\n    call(onCheckUserSession),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}