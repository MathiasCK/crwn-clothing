{"ast":null,"code":"import { applyMiddleware, createStore } from \"redux\";\nimport rootReducer from \"./root-reducer\";\nimport { persistStore } from \"redux-persist\"; // Make Cart Items stay in cart whenever the page is refreshing\n\nimport createSagaMiddleware from \"redux-saga\";\nimport rootSaga from \"./root.saga\";\nimport logger from \"redux-logger\";\n\nif (process.env.NODE_ENV === \"development\") {\n  middlewares.push(logger);\n}\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middlewares = [sagaMiddleware];\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\nsagaMiddleware.run(rootSaga);\nexport const persistor = persistStore(store);\nexport default {\n  store,\n  persistor\n};","map":{"version":3,"sources":["/Users/mathiaskolberg/Documents/React/udemy/crwn-clothing/src/redux/store.js"],"names":["applyMiddleware","createStore","rootReducer","persistStore","createSagaMiddleware","rootSaga","logger","process","env","NODE_ENV","middlewares","push","sagaMiddleware","store","run","persistor"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,SAASC,YAAT,QAA6B,eAA7B,C,CAA8C;;AAC9C,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,MAAP,MAAmB,cAAnB;;AAEA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AAC1CC,EAAAA,WAAW,CAACC,IAAZ,CAAiBL,MAAjB;AACD;;AAED,MAAMM,cAAc,GAAGR,oBAAoB,EAA3C;AAEA,MAAMM,WAAW,GAAG,CAACE,cAAD,CAApB;AAEA,OAAO,MAAMC,KAAK,GAAGZ,WAAW,CAACC,WAAD,EAAcF,eAAe,CAAC,GAAGU,WAAJ,CAA7B,CAAzB;AAEPE,cAAc,CAACE,GAAf,CAAmBT,QAAnB;AAEA,OAAO,MAAMU,SAAS,GAAGZ,YAAY,CAACU,KAAD,CAA9B;AAEP,eAAe;AAAEA,EAAAA,KAAF;AAASE,EAAAA;AAAT,CAAf","sourcesContent":["import { applyMiddleware, createStore } from \"redux\";\nimport rootReducer from \"./root-reducer\";\nimport { persistStore } from \"redux-persist\"; // Make Cart Items stay in cart whenever the page is refreshing\nimport createSagaMiddleware from \"redux-saga\";\nimport rootSaga from \"./root.saga\";\nimport logger from \"redux-logger\";\n\nif (process.env.NODE_ENV === \"development\") {\n  middlewares.push(logger);\n}\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst middlewares = [sagaMiddleware];\n\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\n\nsagaMiddleware.run(rootSaga);\n\nexport const persistor = persistStore(store);\n\nexport default { store, persistor };\n"]},"metadata":{},"sourceType":"module"}