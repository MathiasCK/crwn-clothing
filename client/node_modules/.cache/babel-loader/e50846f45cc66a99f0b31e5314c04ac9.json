{"ast":null,"code":"import { takeLatest, put, all, call } from \"redux-saga/effects\";\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from \"../../Firebase/Firebase.utils\";\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpSuccess, signUpFailure } from \"./user.actions\";\nimport userActionTypes from \"./user.types\";\nexport function* getSnapShotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapShotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(userActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapShotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(userActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* signUp({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.createUserProfileDocument(email, password);\n    yield getSnapShotFromUserAuth(user);\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\nexport function* onSignUp() {\n  yield takeLatest(userActionTypes.SIGN_UP_START, signUp);\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapShotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(userActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\nexport function* onSignOutStart() {\n  yield takeLatest(userActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart)]);\n}","map":{"version":3,"sources":["/Users/mathiaskolberg/Documents/React/udemy/crwn-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","auth","googleProvider","createUserProfileDocument","getCurrentUser","signInSuccess","signInFailure","signOutSuccess","signOutFailure","signUpSuccess","signUpFailure","userActionTypes","getSnapShotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInWithEmail","payload","email","password","signInWithEmailAndPassword","onEmailSignInStart","EMAIL_SIGN_IN_START","signUp","onSignUp","SIGN_UP_START","isUserAuthenticated","onCheckUserSession","CHECK_USER_SESSION","signOut","onSignOutStart","SIGN_OUT_START","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call } from \"redux-saga/effects\";\nimport {\n  auth,\n  googleProvider,\n  createUserProfileDocument,\n  getCurrentUser,\n} from \"../../Firebase/Firebase.utils\";\nimport {\n  signInSuccess,\n  signInFailure,\n  signOutSuccess,\n  signOutFailure,\n  signUpSuccess,\n  signUpFailure,\n} from \"./user.actions\";\nimport userActionTypes from \"./user.types\";\n\nexport function* getSnapShotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* signInWithGoogle() {\n  try {\n    const { user } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapShotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(userActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n\nexport function* signInWithEmail({ payload: { email, password } }) {\n  try {\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapShotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* onEmailSignInStart() {\n  yield takeLatest(userActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\n\nexport function* signUp({ payload: { email, password } }) {\n  try {\n    const { user } = yield auth.createUserProfileDocument(email, password);\n    yield getSnapShotFromUserAuth(user);\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\n\nexport function* onSignUp() {\n  yield takeLatest(userActionTypes.SIGN_UP_START, signUp);\n}\n\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapShotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* onCheckUserSession() {\n  yield takeLatest(userActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\n\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\n\nexport function* onSignOutStart() {\n  yield takeLatest(userActionTypes.SIGN_OUT_START, signOut);\n}\n\nexport function* userSagas() {\n  yield all([\n    call(onGoogleSignInStart),\n    call(onEmailSignInStart),\n    call(onCheckUserSession),\n    call(onSignOutStart),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}